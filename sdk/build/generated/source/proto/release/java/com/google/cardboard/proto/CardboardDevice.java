// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cardboard_device.proto

package com.google.cardboard.proto;

public final class CardboardDevice {
  private CardboardDevice() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface DeviceParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cardboard.DeviceParams)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * String identifying the device's vendor (e.g. "Google, Inc.").
     * A device's [vendor, model] pair is expected to be globally unique.
     * </pre>
     *
     * <code>optional string vendor = 1;</code>
     * @return Whether the vendor field is set.
     */
    boolean hasVendor();
    /**
     * <pre>
     * String identifying the device's vendor (e.g. "Google, Inc.").
     * A device's [vendor, model] pair is expected to be globally unique.
     * </pre>
     *
     * <code>optional string vendor = 1;</code>
     * @return The vendor.
     */
    java.lang.String getVendor();
    /**
     * <pre>
     * String identifying the device's vendor (e.g. "Google, Inc.").
     * A device's [vendor, model] pair is expected to be globally unique.
     * </pre>
     *
     * <code>optional string vendor = 1;</code>
     * @return The bytes for vendor.
     */
    com.google.protobuf.ByteString
        getVendorBytes();

    /**
     * <pre>
     * String identifying the device's model, including revision info if
     * needed (e.g. "Cardboard v1").  A device's [vendor, model] pair is
     * expected to be globally unique.
     * </pre>
     *
     * <code>optional string model = 2;</code>
     * @return Whether the model field is set.
     */
    boolean hasModel();
    /**
     * <pre>
     * String identifying the device's model, including revision info if
     * needed (e.g. "Cardboard v1").  A device's [vendor, model] pair is
     * expected to be globally unique.
     * </pre>
     *
     * <code>optional string model = 2;</code>
     * @return The model.
     */
    java.lang.String getModel();
    /**
     * <pre>
     * String identifying the device's model, including revision info if
     * needed (e.g. "Cardboard v1").  A device's [vendor, model] pair is
     * expected to be globally unique.
     * </pre>
     *
     * <code>optional string model = 2;</code>
     * @return The bytes for model.
     */
    com.google.protobuf.ByteString
        getModelBytes();

    /**
     * <pre>
     * Distance from the display screen to the optical center of lenses.
     * This is a required field for distortion rendering, and must be positive.
     * </pre>
     *
     * <code>optional float screen_to_lens_distance = 3;</code>
     * @return Whether the screenToLensDistance field is set.
     */
    boolean hasScreenToLensDistance();
    /**
     * <pre>
     * Distance from the display screen to the optical center of lenses.
     * This is a required field for distortion rendering, and must be positive.
     * </pre>
     *
     * <code>optional float screen_to_lens_distance = 3;</code>
     * @return The screenToLensDistance.
     */
    float getScreenToLensDistance();

    /**
     * <pre>
     * Horizontal distance between optical center of the lenses.
     * This is a required field for distortion rendering, and must be positive.
     * </pre>
     *
     * <code>optional float inter_lens_distance = 4;</code>
     * @return Whether the interLensDistance field is set.
     */
    boolean hasInterLensDistance();
    /**
     * <pre>
     * Horizontal distance between optical center of the lenses.
     * This is a required field for distortion rendering, and must be positive.
     * </pre>
     *
     * <code>optional float inter_lens_distance = 4;</code>
     * @return The interLensDistance.
     */
    float getInterLensDistance();

    /**
     * <pre>
     * Four-element tuple (left, right, bottom, top) of left eye's view extent
     * angles relative to center, assuming the following:
     *     * eye is aligned with optical center of lens
     *     * display screen is equal or larger than extents viewable through lens
     *     * nominal eye-to-lens distance
     *     * mirrored field of view will be applied to the right eye
     * These values are essentially used as an optimization to avoid rendering
     * pixels which can't be seen.
     * This is a required field for distortion rendering, and angles must be
     * positive.
     * </pre>
     *
     * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
     * @return A list containing the leftEyeFieldOfViewAngles.
     */
    java.util.List<java.lang.Float> getLeftEyeFieldOfViewAnglesList();
    /**
     * <pre>
     * Four-element tuple (left, right, bottom, top) of left eye's view extent
     * angles relative to center, assuming the following:
     *     * eye is aligned with optical center of lens
     *     * display screen is equal or larger than extents viewable through lens
     *     * nominal eye-to-lens distance
     *     * mirrored field of view will be applied to the right eye
     * These values are essentially used as an optimization to avoid rendering
     * pixels which can't be seen.
     * This is a required field for distortion rendering, and angles must be
     * positive.
     * </pre>
     *
     * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
     * @return The count of leftEyeFieldOfViewAngles.
     */
    int getLeftEyeFieldOfViewAnglesCount();
    /**
     * <pre>
     * Four-element tuple (left, right, bottom, top) of left eye's view extent
     * angles relative to center, assuming the following:
     *     * eye is aligned with optical center of lens
     *     * display screen is equal or larger than extents viewable through lens
     *     * nominal eye-to-lens distance
     *     * mirrored field of view will be applied to the right eye
     * These values are essentially used as an optimization to avoid rendering
     * pixels which can't be seen.
     * This is a required field for distortion rendering, and angles must be
     * positive.
     * </pre>
     *
     * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The leftEyeFieldOfViewAngles at the given index.
     */
    float getLeftEyeFieldOfViewAngles(int index);

    /**
     * <pre>
     * Set according to vertical alignment strategy-- see enum comments above.
     * NOTE: If you set this to CENTER, see special instructions for the
     * tray_to_lens_distance field below.
     * </pre>
     *
     * <code>optional .cardboard.DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];</code>
     * @return Whether the verticalAlignment field is set.
     */
    boolean hasVerticalAlignment();
    /**
     * <pre>
     * Set according to vertical alignment strategy-- see enum comments above.
     * NOTE: If you set this to CENTER, see special instructions for the
     * tray_to_lens_distance field below.
     * </pre>
     *
     * <code>optional .cardboard.DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];</code>
     * @return The verticalAlignment.
     */
    com.google.cardboard.proto.CardboardDevice.DeviceParams.VerticalAlignmentType getVerticalAlignment();

    /**
     * <pre>
     * If the phone is aligned vertically within the device by resting against
     * a fixed top or bottom tray, this is the distance from the tray to
     * optical center of the lenses.
     * This is a required field for distortion rendering, and must be positive.
     * NOTE: Due to a bug in initial versions of the SDK's, this field
     * must be set explicitly to .035 when vertical_alignment = CENTER.
     * </pre>
     *
     * <code>optional float tray_to_lens_distance = 6;</code>
     * @return Whether the trayToLensDistance field is set.
     */
    boolean hasTrayToLensDistance();
    /**
     * <pre>
     * If the phone is aligned vertically within the device by resting against
     * a fixed top or bottom tray, this is the distance from the tray to
     * optical center of the lenses.
     * This is a required field for distortion rendering, and must be positive.
     * NOTE: Due to a bug in initial versions of the SDK's, this field
     * must be set explicitly to .035 when vertical_alignment = CENTER.
     * </pre>
     *
     * <code>optional float tray_to_lens_distance = 6;</code>
     * @return The trayToLensDistance.
     */
    float getTrayToLensDistance();

    /**
     * <pre>
     * Coefficients Ki for pincushion distortion function which maps
     * from position on real screen to virtual screen (i.e. texture) relative
     * to optical center:
     *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
     * where r is the distance in tan-angle units from the optical center,
     * p the input point, and p' the output point.  Tan-angle units can be
     * computed as distance on the screen divided by distance from the
     * virtual eye to the screen.
     * </pre>
     *
     * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
     * @return A list containing the distortionCoefficients.
     */
    java.util.List<java.lang.Float> getDistortionCoefficientsList();
    /**
     * <pre>
     * Coefficients Ki for pincushion distortion function which maps
     * from position on real screen to virtual screen (i.e. texture) relative
     * to optical center:
     *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
     * where r is the distance in tan-angle units from the optical center,
     * p the input point, and p' the output point.  Tan-angle units can be
     * computed as distance on the screen divided by distance from the
     * virtual eye to the screen.
     * </pre>
     *
     * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
     * @return The count of distortionCoefficients.
     */
    int getDistortionCoefficientsCount();
    /**
     * <pre>
     * Coefficients Ki for pincushion distortion function which maps
     * from position on real screen to virtual screen (i.e. texture) relative
     * to optical center:
     *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
     * where r is the distance in tan-angle units from the optical center,
     * p the input point, and p' the output point.  Tan-angle units can be
     * computed as distance on the screen divided by distance from the
     * virtual eye to the screen.
     * </pre>
     *
     * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The distortionCoefficients at the given index.
     */
    float getDistortionCoefficients(int index);

    /**
     * <pre>
     * Specify primary input mechanism of the HMD.  Intended for advisory
     * purposes only, to address simple questions such as "can HMD
     * be used with apps requiring a physical button event?" or "what icon
     * should be used to represent button action to the user?".
     * </pre>
     *
     * <code>optional .cardboard.DeviceParams.ButtonType primary_button = 12 [default = MAGNET];</code>
     * @return Whether the primaryButton field is set.
     */
    boolean hasPrimaryButton();
    /**
     * <pre>
     * Specify primary input mechanism of the HMD.  Intended for advisory
     * purposes only, to address simple questions such as "can HMD
     * be used with apps requiring a physical button event?" or "what icon
     * should be used to represent button action to the user?".
     * </pre>
     *
     * <code>optional .cardboard.DeviceParams.ButtonType primary_button = 12 [default = MAGNET];</code>
     * @return The primaryButton.
     */
    com.google.cardboard.proto.CardboardDevice.DeviceParams.ButtonType getPrimaryButton();
  }
  /**
   * <pre>
   **
   * Message describing properties of a VR head mount device (HMD) which uses an
   * interchangeable smartphone as a display (e.g. Google Cardboard).
   * While some properties are certain (e.g. inter_lens_distance), others
   * represent nominal values which may be refined depending on context (e.g.
   * viewport_angles).
   * Lengths are in meters unless noted otherwise.  Fields are _required_
   * unless noted otherwise.
   * Some context on why this set of parameters are deemed necessary and
   * sufficient:
   *    * FOV scale can be reasonably approximated from lens-to-screen distance
   *      and display size (i.e. knowing lens focal length isn't crucial).
   *    * Lenses are assumed to be horizontally centered with respect to
   *      display.
   *    * The display is not necessarily vertically centered.  For interchangeable
   *      phones where the device rests against a tray, we can derive
   *      the vertical offset from tray-to-lens height along with phone-specific
   *      bezel and screen sizes (supplied separately).
   * </pre>
   *
   * Protobuf type {@code cardboard.DeviceParams}
   */
  public  static final class DeviceParams extends
      com.google.protobuf.GeneratedMessageLite<
          DeviceParams, DeviceParams.Builder> implements
      // @@protoc_insertion_point(message_implements:cardboard.DeviceParams)
      DeviceParamsOrBuilder {
    private DeviceParams() {
      vendor_ = "";
      model_ = "";
      leftEyeFieldOfViewAngles_ = emptyFloatList();
      distortionCoefficients_ = emptyFloatList();
      primaryButton_ = 1;
    }
    /**
     * Protobuf enum {@code cardboard.DeviceParams.VerticalAlignmentType}
     */
    public enum VerticalAlignmentType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       * phone rests against a fixed bottom tray
       * </pre>
       *
       * <code>BOTTOM = 0;</code>
       */
      BOTTOM(0),
      /**
       * <pre>
       * phone screen assumed to be centered w.r.t. lenses
       * </pre>
       *
       * <code>CENTER = 1;</code>
       */
      CENTER(1),
      /**
       * <pre>
       * phone rests against a fixed top tray
       * </pre>
       *
       * <code>TOP = 2;</code>
       */
      TOP(2),
      ;

      /**
       * <pre>
       * phone rests against a fixed bottom tray
       * </pre>
       *
       * <code>BOTTOM = 0;</code>
       */
      public static final int BOTTOM_VALUE = 0;
      /**
       * <pre>
       * phone screen assumed to be centered w.r.t. lenses
       * </pre>
       *
       * <code>CENTER = 1;</code>
       */
      public static final int CENTER_VALUE = 1;
      /**
       * <pre>
       * phone rests against a fixed top tray
       * </pre>
       *
       * <code>TOP = 2;</code>
       */
      public static final int TOP_VALUE = 2;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static VerticalAlignmentType valueOf(int value) {
        return forNumber(value);
      }

      public static VerticalAlignmentType forNumber(int value) {
        switch (value) {
          case 0: return BOTTOM;
          case 1: return CENTER;
          case 2: return TOP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<VerticalAlignmentType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          VerticalAlignmentType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<VerticalAlignmentType>() {
              @java.lang.Override
              public VerticalAlignmentType findValueByNumber(int number) {
                return VerticalAlignmentType.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return VerticalAlignmentTypeVerifier.INSTANCE;
      }

      private static final class VerticalAlignmentTypeVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new VerticalAlignmentTypeVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return VerticalAlignmentType.forNumber(number) != null;
              }
            };

      private final int value;

      private VerticalAlignmentType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:cardboard.DeviceParams.VerticalAlignmentType)
    }

    /**
     * Protobuf enum {@code cardboard.DeviceParams.ButtonType}
     */
    public enum ButtonType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       * No physical button, and touch screen is not easily accessible.
       * </pre>
       *
       * <code>NONE = 0;</code>
       */
      NONE(0),
      /**
       * <pre>
       * HMD has integrated magnet switch similar to original Cardboard.
       * </pre>
       *
       * <code>MAGNET = 1;</code>
       */
      MAGNET(1),
      /**
       * <pre>
       * At least a portion of touch screen is easily accessible to user for taps.
       * </pre>
       *
       * <code>TOUCH = 2;</code>
       */
      TOUCH(2),
      /**
       * <pre>
       * Touch screen is triggered indirectly via integrated button on the HMD.
       * </pre>
       *
       * <code>INDIRECT_TOUCH = 3;</code>
       */
      INDIRECT_TOUCH(3),
      ;

      /**
       * <pre>
       * No physical button, and touch screen is not easily accessible.
       * </pre>
       *
       * <code>NONE = 0;</code>
       */
      public static final int NONE_VALUE = 0;
      /**
       * <pre>
       * HMD has integrated magnet switch similar to original Cardboard.
       * </pre>
       *
       * <code>MAGNET = 1;</code>
       */
      public static final int MAGNET_VALUE = 1;
      /**
       * <pre>
       * At least a portion of touch screen is easily accessible to user for taps.
       * </pre>
       *
       * <code>TOUCH = 2;</code>
       */
      public static final int TOUCH_VALUE = 2;
      /**
       * <pre>
       * Touch screen is triggered indirectly via integrated button on the HMD.
       * </pre>
       *
       * <code>INDIRECT_TOUCH = 3;</code>
       */
      public static final int INDIRECT_TOUCH_VALUE = 3;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ButtonType valueOf(int value) {
        return forNumber(value);
      }

      public static ButtonType forNumber(int value) {
        switch (value) {
          case 0: return NONE;
          case 1: return MAGNET;
          case 2: return TOUCH;
          case 3: return INDIRECT_TOUCH;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ButtonType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ButtonType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ButtonType>() {
              @java.lang.Override
              public ButtonType findValueByNumber(int number) {
                return ButtonType.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return ButtonTypeVerifier.INSTANCE;
      }

      private static final class ButtonTypeVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new ButtonTypeVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return ButtonType.forNumber(number) != null;
              }
            };

      private final int value;

      private ButtonType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:cardboard.DeviceParams.ButtonType)
    }

    private int bitField0_;
    public static final int VENDOR_FIELD_NUMBER = 1;
    private java.lang.String vendor_;
    /**
     * <pre>
     * String identifying the device's vendor (e.g. "Google, Inc.").
     * A device's [vendor, model] pair is expected to be globally unique.
     * </pre>
     *
     * <code>optional string vendor = 1;</code>
     * @return Whether the vendor field is set.
     */
    @java.lang.Override
    public boolean hasVendor() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * String identifying the device's vendor (e.g. "Google, Inc.").
     * A device's [vendor, model] pair is expected to be globally unique.
     * </pre>
     *
     * <code>optional string vendor = 1;</code>
     * @return The vendor.
     */
    @java.lang.Override
    public java.lang.String getVendor() {
      return vendor_;
    }
    /**
     * <pre>
     * String identifying the device's vendor (e.g. "Google, Inc.").
     * A device's [vendor, model] pair is expected to be globally unique.
     * </pre>
     *
     * <code>optional string vendor = 1;</code>
     * @return The bytes for vendor.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVendorBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(vendor_);
    }
    /**
     * <pre>
     * String identifying the device's vendor (e.g. "Google, Inc.").
     * A device's [vendor, model] pair is expected to be globally unique.
     * </pre>
     *
     * <code>optional string vendor = 1;</code>
     * @param value The vendor to set.
     */
    private void setVendor(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  bitField0_ |= 0x00000001;
      vendor_ = value;
    }
    /**
     * <pre>
     * String identifying the device's vendor (e.g. "Google, Inc.").
     * A device's [vendor, model] pair is expected to be globally unique.
     * </pre>
     *
     * <code>optional string vendor = 1;</code>
     */
    private void clearVendor() {
      bitField0_ = (bitField0_ & ~0x00000001);
      vendor_ = getDefaultInstance().getVendor();
    }
    /**
     * <pre>
     * String identifying the device's vendor (e.g. "Google, Inc.").
     * A device's [vendor, model] pair is expected to be globally unique.
     * </pre>
     *
     * <code>optional string vendor = 1;</code>
     * @param value The bytes for vendor to set.
     */
    private void setVendorBytes(
        com.google.protobuf.ByteString value) {
      vendor_ = value.toStringUtf8();
      bitField0_ |= 0x00000001;
    }

    public static final int MODEL_FIELD_NUMBER = 2;
    private java.lang.String model_;
    /**
     * <pre>
     * String identifying the device's model, including revision info if
     * needed (e.g. "Cardboard v1").  A device's [vendor, model] pair is
     * expected to be globally unique.
     * </pre>
     *
     * <code>optional string model = 2;</code>
     * @return Whether the model field is set.
     */
    @java.lang.Override
    public boolean hasModel() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * String identifying the device's model, including revision info if
     * needed (e.g. "Cardboard v1").  A device's [vendor, model] pair is
     * expected to be globally unique.
     * </pre>
     *
     * <code>optional string model = 2;</code>
     * @return The model.
     */
    @java.lang.Override
    public java.lang.String getModel() {
      return model_;
    }
    /**
     * <pre>
     * String identifying the device's model, including revision info if
     * needed (e.g. "Cardboard v1").  A device's [vendor, model] pair is
     * expected to be globally unique.
     * </pre>
     *
     * <code>optional string model = 2;</code>
     * @return The bytes for model.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getModelBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(model_);
    }
    /**
     * <pre>
     * String identifying the device's model, including revision info if
     * needed (e.g. "Cardboard v1").  A device's [vendor, model] pair is
     * expected to be globally unique.
     * </pre>
     *
     * <code>optional string model = 2;</code>
     * @param value The model to set.
     */
    private void setModel(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  bitField0_ |= 0x00000002;
      model_ = value;
    }
    /**
     * <pre>
     * String identifying the device's model, including revision info if
     * needed (e.g. "Cardboard v1").  A device's [vendor, model] pair is
     * expected to be globally unique.
     * </pre>
     *
     * <code>optional string model = 2;</code>
     */
    private void clearModel() {
      bitField0_ = (bitField0_ & ~0x00000002);
      model_ = getDefaultInstance().getModel();
    }
    /**
     * <pre>
     * String identifying the device's model, including revision info if
     * needed (e.g. "Cardboard v1").  A device's [vendor, model] pair is
     * expected to be globally unique.
     * </pre>
     *
     * <code>optional string model = 2;</code>
     * @param value The bytes for model to set.
     */
    private void setModelBytes(
        com.google.protobuf.ByteString value) {
      model_ = value.toStringUtf8();
      bitField0_ |= 0x00000002;
    }

    public static final int SCREEN_TO_LENS_DISTANCE_FIELD_NUMBER = 3;
    private float screenToLensDistance_;
    /**
     * <pre>
     * Distance from the display screen to the optical center of lenses.
     * This is a required field for distortion rendering, and must be positive.
     * </pre>
     *
     * <code>optional float screen_to_lens_distance = 3;</code>
     * @return Whether the screenToLensDistance field is set.
     */
    @java.lang.Override
    public boolean hasScreenToLensDistance() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Distance from the display screen to the optical center of lenses.
     * This is a required field for distortion rendering, and must be positive.
     * </pre>
     *
     * <code>optional float screen_to_lens_distance = 3;</code>
     * @return The screenToLensDistance.
     */
    @java.lang.Override
    public float getScreenToLensDistance() {
      return screenToLensDistance_;
    }
    /**
     * <pre>
     * Distance from the display screen to the optical center of lenses.
     * This is a required field for distortion rendering, and must be positive.
     * </pre>
     *
     * <code>optional float screen_to_lens_distance = 3;</code>
     * @param value The screenToLensDistance to set.
     */
    private void setScreenToLensDistance(float value) {
      bitField0_ |= 0x00000004;
      screenToLensDistance_ = value;
    }
    /**
     * <pre>
     * Distance from the display screen to the optical center of lenses.
     * This is a required field for distortion rendering, and must be positive.
     * </pre>
     *
     * <code>optional float screen_to_lens_distance = 3;</code>
     */
    private void clearScreenToLensDistance() {
      bitField0_ = (bitField0_ & ~0x00000004);
      screenToLensDistance_ = 0F;
    }

    public static final int INTER_LENS_DISTANCE_FIELD_NUMBER = 4;
    private float interLensDistance_;
    /**
     * <pre>
     * Horizontal distance between optical center of the lenses.
     * This is a required field for distortion rendering, and must be positive.
     * </pre>
     *
     * <code>optional float inter_lens_distance = 4;</code>
     * @return Whether the interLensDistance field is set.
     */
    @java.lang.Override
    public boolean hasInterLensDistance() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Horizontal distance between optical center of the lenses.
     * This is a required field for distortion rendering, and must be positive.
     * </pre>
     *
     * <code>optional float inter_lens_distance = 4;</code>
     * @return The interLensDistance.
     */
    @java.lang.Override
    public float getInterLensDistance() {
      return interLensDistance_;
    }
    /**
     * <pre>
     * Horizontal distance between optical center of the lenses.
     * This is a required field for distortion rendering, and must be positive.
     * </pre>
     *
     * <code>optional float inter_lens_distance = 4;</code>
     * @param value The interLensDistance to set.
     */
    private void setInterLensDistance(float value) {
      bitField0_ |= 0x00000008;
      interLensDistance_ = value;
    }
    /**
     * <pre>
     * Horizontal distance between optical center of the lenses.
     * This is a required field for distortion rendering, and must be positive.
     * </pre>
     *
     * <code>optional float inter_lens_distance = 4;</code>
     */
    private void clearInterLensDistance() {
      bitField0_ = (bitField0_ & ~0x00000008);
      interLensDistance_ = 0F;
    }

    public static final int LEFT_EYE_FIELD_OF_VIEW_ANGLES_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.FloatList leftEyeFieldOfViewAngles_;
    /**
     * <pre>
     * Four-element tuple (left, right, bottom, top) of left eye's view extent
     * angles relative to center, assuming the following:
     *     * eye is aligned with optical center of lens
     *     * display screen is equal or larger than extents viewable through lens
     *     * nominal eye-to-lens distance
     *     * mirrored field of view will be applied to the right eye
     * These values are essentially used as an optimization to avoid rendering
     * pixels which can't be seen.
     * This is a required field for distortion rendering, and angles must be
     * positive.
     * </pre>
     *
     * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
     * @return A list containing the leftEyeFieldOfViewAngles.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getLeftEyeFieldOfViewAnglesList() {
      return leftEyeFieldOfViewAngles_;
    }
    /**
     * <pre>
     * Four-element tuple (left, right, bottom, top) of left eye's view extent
     * angles relative to center, assuming the following:
     *     * eye is aligned with optical center of lens
     *     * display screen is equal or larger than extents viewable through lens
     *     * nominal eye-to-lens distance
     *     * mirrored field of view will be applied to the right eye
     * These values are essentially used as an optimization to avoid rendering
     * pixels which can't be seen.
     * This is a required field for distortion rendering, and angles must be
     * positive.
     * </pre>
     *
     * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
     * @return The count of leftEyeFieldOfViewAngles.
     */
    @java.lang.Override
    public int getLeftEyeFieldOfViewAnglesCount() {
      return leftEyeFieldOfViewAngles_.size();
    }
    /**
     * <pre>
     * Four-element tuple (left, right, bottom, top) of left eye's view extent
     * angles relative to center, assuming the following:
     *     * eye is aligned with optical center of lens
     *     * display screen is equal or larger than extents viewable through lens
     *     * nominal eye-to-lens distance
     *     * mirrored field of view will be applied to the right eye
     * These values are essentially used as an optimization to avoid rendering
     * pixels which can't be seen.
     * This is a required field for distortion rendering, and angles must be
     * positive.
     * </pre>
     *
     * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The leftEyeFieldOfViewAngles at the given index.
     */
    @java.lang.Override
    public float getLeftEyeFieldOfViewAngles(int index) {
      return leftEyeFieldOfViewAngles_.getFloat(index);
    }
    private int leftEyeFieldOfViewAnglesMemoizedSerializedSize = -1;
    private void ensureLeftEyeFieldOfViewAnglesIsMutable() {
      com.google.protobuf.Internal.FloatList tmp = leftEyeFieldOfViewAngles_;
      if (!tmp.isModifiable()) {
        leftEyeFieldOfViewAngles_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * Four-element tuple (left, right, bottom, top) of left eye's view extent
     * angles relative to center, assuming the following:
     *     * eye is aligned with optical center of lens
     *     * display screen is equal or larger than extents viewable through lens
     *     * nominal eye-to-lens distance
     *     * mirrored field of view will be applied to the right eye
     * These values are essentially used as an optimization to avoid rendering
     * pixels which can't be seen.
     * This is a required field for distortion rendering, and angles must be
     * positive.
     * </pre>
     *
     * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The leftEyeFieldOfViewAngles to set.
     */
    private void setLeftEyeFieldOfViewAngles(
        int index, float value) {
      ensureLeftEyeFieldOfViewAnglesIsMutable();
      leftEyeFieldOfViewAngles_.setFloat(index, value);
    }
    /**
     * <pre>
     * Four-element tuple (left, right, bottom, top) of left eye's view extent
     * angles relative to center, assuming the following:
     *     * eye is aligned with optical center of lens
     *     * display screen is equal or larger than extents viewable through lens
     *     * nominal eye-to-lens distance
     *     * mirrored field of view will be applied to the right eye
     * These values are essentially used as an optimization to avoid rendering
     * pixels which can't be seen.
     * This is a required field for distortion rendering, and angles must be
     * positive.
     * </pre>
     *
     * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
     * @param value The leftEyeFieldOfViewAngles to add.
     */
    private void addLeftEyeFieldOfViewAngles(float value) {
      ensureLeftEyeFieldOfViewAnglesIsMutable();
      leftEyeFieldOfViewAngles_.addFloat(value);
    }
    /**
     * <pre>
     * Four-element tuple (left, right, bottom, top) of left eye's view extent
     * angles relative to center, assuming the following:
     *     * eye is aligned with optical center of lens
     *     * display screen is equal or larger than extents viewable through lens
     *     * nominal eye-to-lens distance
     *     * mirrored field of view will be applied to the right eye
     * These values are essentially used as an optimization to avoid rendering
     * pixels which can't be seen.
     * This is a required field for distortion rendering, and angles must be
     * positive.
     * </pre>
     *
     * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
     * @param values The leftEyeFieldOfViewAngles to add.
     */
    private void addAllLeftEyeFieldOfViewAngles(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureLeftEyeFieldOfViewAnglesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, leftEyeFieldOfViewAngles_);
    }
    /**
     * <pre>
     * Four-element tuple (left, right, bottom, top) of left eye's view extent
     * angles relative to center, assuming the following:
     *     * eye is aligned with optical center of lens
     *     * display screen is equal or larger than extents viewable through lens
     *     * nominal eye-to-lens distance
     *     * mirrored field of view will be applied to the right eye
     * These values are essentially used as an optimization to avoid rendering
     * pixels which can't be seen.
     * This is a required field for distortion rendering, and angles must be
     * positive.
     * </pre>
     *
     * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
     */
    private void clearLeftEyeFieldOfViewAngles() {
      leftEyeFieldOfViewAngles_ = emptyFloatList();
    }

    public static final int VERTICAL_ALIGNMENT_FIELD_NUMBER = 11;
    private int verticalAlignment_;
    /**
     * <pre>
     * Set according to vertical alignment strategy-- see enum comments above.
     * NOTE: If you set this to CENTER, see special instructions for the
     * tray_to_lens_distance field below.
     * </pre>
     *
     * <code>optional .cardboard.DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];</code>
     * @return Whether the verticalAlignment field is set.
     */
    @java.lang.Override
    public boolean hasVerticalAlignment() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Set according to vertical alignment strategy-- see enum comments above.
     * NOTE: If you set this to CENTER, see special instructions for the
     * tray_to_lens_distance field below.
     * </pre>
     *
     * <code>optional .cardboard.DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];</code>
     * @return The verticalAlignment.
     */
    @java.lang.Override
    public com.google.cardboard.proto.CardboardDevice.DeviceParams.VerticalAlignmentType getVerticalAlignment() {
      com.google.cardboard.proto.CardboardDevice.DeviceParams.VerticalAlignmentType result = com.google.cardboard.proto.CardboardDevice.DeviceParams.VerticalAlignmentType.forNumber(verticalAlignment_);
      return result == null ? com.google.cardboard.proto.CardboardDevice.DeviceParams.VerticalAlignmentType.BOTTOM : result;
    }
    /**
     * <pre>
     * Set according to vertical alignment strategy-- see enum comments above.
     * NOTE: If you set this to CENTER, see special instructions for the
     * tray_to_lens_distance field below.
     * </pre>
     *
     * <code>optional .cardboard.DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];</code>
     * @param value The verticalAlignment to set.
     */
    private void setVerticalAlignment(com.google.cardboard.proto.CardboardDevice.DeviceParams.VerticalAlignmentType value) {
      verticalAlignment_ = value.getNumber();
      bitField0_ |= 0x00000010;
    }
    /**
     * <pre>
     * Set according to vertical alignment strategy-- see enum comments above.
     * NOTE: If you set this to CENTER, see special instructions for the
     * tray_to_lens_distance field below.
     * </pre>
     *
     * <code>optional .cardboard.DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];</code>
     */
    private void clearVerticalAlignment() {
      bitField0_ = (bitField0_ & ~0x00000010);
      verticalAlignment_ = 0;
    }

    public static final int TRAY_TO_LENS_DISTANCE_FIELD_NUMBER = 6;
    private float trayToLensDistance_;
    /**
     * <pre>
     * If the phone is aligned vertically within the device by resting against
     * a fixed top or bottom tray, this is the distance from the tray to
     * optical center of the lenses.
     * This is a required field for distortion rendering, and must be positive.
     * NOTE: Due to a bug in initial versions of the SDK's, this field
     * must be set explicitly to .035 when vertical_alignment = CENTER.
     * </pre>
     *
     * <code>optional float tray_to_lens_distance = 6;</code>
     * @return Whether the trayToLensDistance field is set.
     */
    @java.lang.Override
    public boolean hasTrayToLensDistance() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * If the phone is aligned vertically within the device by resting against
     * a fixed top or bottom tray, this is the distance from the tray to
     * optical center of the lenses.
     * This is a required field for distortion rendering, and must be positive.
     * NOTE: Due to a bug in initial versions of the SDK's, this field
     * must be set explicitly to .035 when vertical_alignment = CENTER.
     * </pre>
     *
     * <code>optional float tray_to_lens_distance = 6;</code>
     * @return The trayToLensDistance.
     */
    @java.lang.Override
    public float getTrayToLensDistance() {
      return trayToLensDistance_;
    }
    /**
     * <pre>
     * If the phone is aligned vertically within the device by resting against
     * a fixed top or bottom tray, this is the distance from the tray to
     * optical center of the lenses.
     * This is a required field for distortion rendering, and must be positive.
     * NOTE: Due to a bug in initial versions of the SDK's, this field
     * must be set explicitly to .035 when vertical_alignment = CENTER.
     * </pre>
     *
     * <code>optional float tray_to_lens_distance = 6;</code>
     * @param value The trayToLensDistance to set.
     */
    private void setTrayToLensDistance(float value) {
      bitField0_ |= 0x00000020;
      trayToLensDistance_ = value;
    }
    /**
     * <pre>
     * If the phone is aligned vertically within the device by resting against
     * a fixed top or bottom tray, this is the distance from the tray to
     * optical center of the lenses.
     * This is a required field for distortion rendering, and must be positive.
     * NOTE: Due to a bug in initial versions of the SDK's, this field
     * must be set explicitly to .035 when vertical_alignment = CENTER.
     * </pre>
     *
     * <code>optional float tray_to_lens_distance = 6;</code>
     */
    private void clearTrayToLensDistance() {
      bitField0_ = (bitField0_ & ~0x00000020);
      trayToLensDistance_ = 0F;
    }

    public static final int DISTORTION_COEFFICIENTS_FIELD_NUMBER = 7;
    private com.google.protobuf.Internal.FloatList distortionCoefficients_;
    /**
     * <pre>
     * Coefficients Ki for pincushion distortion function which maps
     * from position on real screen to virtual screen (i.e. texture) relative
     * to optical center:
     *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
     * where r is the distance in tan-angle units from the optical center,
     * p the input point, and p' the output point.  Tan-angle units can be
     * computed as distance on the screen divided by distance from the
     * virtual eye to the screen.
     * </pre>
     *
     * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
     * @return A list containing the distortionCoefficients.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getDistortionCoefficientsList() {
      return distortionCoefficients_;
    }
    /**
     * <pre>
     * Coefficients Ki for pincushion distortion function which maps
     * from position on real screen to virtual screen (i.e. texture) relative
     * to optical center:
     *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
     * where r is the distance in tan-angle units from the optical center,
     * p the input point, and p' the output point.  Tan-angle units can be
     * computed as distance on the screen divided by distance from the
     * virtual eye to the screen.
     * </pre>
     *
     * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
     * @return The count of distortionCoefficients.
     */
    @java.lang.Override
    public int getDistortionCoefficientsCount() {
      return distortionCoefficients_.size();
    }
    /**
     * <pre>
     * Coefficients Ki for pincushion distortion function which maps
     * from position on real screen to virtual screen (i.e. texture) relative
     * to optical center:
     *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
     * where r is the distance in tan-angle units from the optical center,
     * p the input point, and p' the output point.  Tan-angle units can be
     * computed as distance on the screen divided by distance from the
     * virtual eye to the screen.
     * </pre>
     *
     * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
     * @param index The index of the element to return.
     * @return The distortionCoefficients at the given index.
     */
    @java.lang.Override
    public float getDistortionCoefficients(int index) {
      return distortionCoefficients_.getFloat(index);
    }
    private int distortionCoefficientsMemoizedSerializedSize = -1;
    private void ensureDistortionCoefficientsIsMutable() {
      com.google.protobuf.Internal.FloatList tmp = distortionCoefficients_;
      if (!tmp.isModifiable()) {
        distortionCoefficients_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * Coefficients Ki for pincushion distortion function which maps
     * from position on real screen to virtual screen (i.e. texture) relative
     * to optical center:
     *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
     * where r is the distance in tan-angle units from the optical center,
     * p the input point, and p' the output point.  Tan-angle units can be
     * computed as distance on the screen divided by distance from the
     * virtual eye to the screen.
     * </pre>
     *
     * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
     * @param index The index to set the value at.
     * @param value The distortionCoefficients to set.
     */
    private void setDistortionCoefficients(
        int index, float value) {
      ensureDistortionCoefficientsIsMutable();
      distortionCoefficients_.setFloat(index, value);
    }
    /**
     * <pre>
     * Coefficients Ki for pincushion distortion function which maps
     * from position on real screen to virtual screen (i.e. texture) relative
     * to optical center:
     *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
     * where r is the distance in tan-angle units from the optical center,
     * p the input point, and p' the output point.  Tan-angle units can be
     * computed as distance on the screen divided by distance from the
     * virtual eye to the screen.
     * </pre>
     *
     * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
     * @param value The distortionCoefficients to add.
     */
    private void addDistortionCoefficients(float value) {
      ensureDistortionCoefficientsIsMutable();
      distortionCoefficients_.addFloat(value);
    }
    /**
     * <pre>
     * Coefficients Ki for pincushion distortion function which maps
     * from position on real screen to virtual screen (i.e. texture) relative
     * to optical center:
     *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
     * where r is the distance in tan-angle units from the optical center,
     * p the input point, and p' the output point.  Tan-angle units can be
     * computed as distance on the screen divided by distance from the
     * virtual eye to the screen.
     * </pre>
     *
     * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
     * @param values The distortionCoefficients to add.
     */
    private void addAllDistortionCoefficients(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureDistortionCoefficientsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, distortionCoefficients_);
    }
    /**
     * <pre>
     * Coefficients Ki for pincushion distortion function which maps
     * from position on real screen to virtual screen (i.e. texture) relative
     * to optical center:
     *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
     * where r is the distance in tan-angle units from the optical center,
     * p the input point, and p' the output point.  Tan-angle units can be
     * computed as distance on the screen divided by distance from the
     * virtual eye to the screen.
     * </pre>
     *
     * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
     */
    private void clearDistortionCoefficients() {
      distortionCoefficients_ = emptyFloatList();
    }

    public static final int PRIMARY_BUTTON_FIELD_NUMBER = 12;
    private int primaryButton_;
    /**
     * <pre>
     * Specify primary input mechanism of the HMD.  Intended for advisory
     * purposes only, to address simple questions such as "can HMD
     * be used with apps requiring a physical button event?" or "what icon
     * should be used to represent button action to the user?".
     * </pre>
     *
     * <code>optional .cardboard.DeviceParams.ButtonType primary_button = 12 [default = MAGNET];</code>
     * @return Whether the primaryButton field is set.
     */
    @java.lang.Override
    public boolean hasPrimaryButton() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Specify primary input mechanism of the HMD.  Intended for advisory
     * purposes only, to address simple questions such as "can HMD
     * be used with apps requiring a physical button event?" or "what icon
     * should be used to represent button action to the user?".
     * </pre>
     *
     * <code>optional .cardboard.DeviceParams.ButtonType primary_button = 12 [default = MAGNET];</code>
     * @return The primaryButton.
     */
    @java.lang.Override
    public com.google.cardboard.proto.CardboardDevice.DeviceParams.ButtonType getPrimaryButton() {
      com.google.cardboard.proto.CardboardDevice.DeviceParams.ButtonType result = com.google.cardboard.proto.CardboardDevice.DeviceParams.ButtonType.forNumber(primaryButton_);
      return result == null ? com.google.cardboard.proto.CardboardDevice.DeviceParams.ButtonType.MAGNET : result;
    }
    /**
     * <pre>
     * Specify primary input mechanism of the HMD.  Intended for advisory
     * purposes only, to address simple questions such as "can HMD
     * be used with apps requiring a physical button event?" or "what icon
     * should be used to represent button action to the user?".
     * </pre>
     *
     * <code>optional .cardboard.DeviceParams.ButtonType primary_button = 12 [default = MAGNET];</code>
     * @param value The primaryButton to set.
     */
    private void setPrimaryButton(com.google.cardboard.proto.CardboardDevice.DeviceParams.ButtonType value) {
      primaryButton_ = value.getNumber();
      bitField0_ |= 0x00000040;
    }
    /**
     * <pre>
     * Specify primary input mechanism of the HMD.  Intended for advisory
     * purposes only, to address simple questions such as "can HMD
     * be used with apps requiring a physical button event?" or "what icon
     * should be used to represent button action to the user?".
     * </pre>
     *
     * <code>optional .cardboard.DeviceParams.ButtonType primary_button = 12 [default = MAGNET];</code>
     */
    private void clearPrimaryButton() {
      bitField0_ = (bitField0_ & ~0x00000040);
      primaryButton_ = 1;
    }

    public static com.google.cardboard.proto.CardboardDevice.DeviceParams parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.cardboard.proto.CardboardDevice.DeviceParams parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.cardboard.proto.CardboardDevice.DeviceParams parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.cardboard.proto.CardboardDevice.DeviceParams parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.cardboard.proto.CardboardDevice.DeviceParams parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.cardboard.proto.CardboardDevice.DeviceParams parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.cardboard.proto.CardboardDevice.DeviceParams parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.cardboard.proto.CardboardDevice.DeviceParams parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.cardboard.proto.CardboardDevice.DeviceParams parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.cardboard.proto.CardboardDevice.DeviceParams parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.cardboard.proto.CardboardDevice.DeviceParams parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.cardboard.proto.CardboardDevice.DeviceParams parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.cardboard.proto.CardboardDevice.DeviceParams prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     **
     * Message describing properties of a VR head mount device (HMD) which uses an
     * interchangeable smartphone as a display (e.g. Google Cardboard).
     * While some properties are certain (e.g. inter_lens_distance), others
     * represent nominal values which may be refined depending on context (e.g.
     * viewport_angles).
     * Lengths are in meters unless noted otherwise.  Fields are _required_
     * unless noted otherwise.
     * Some context on why this set of parameters are deemed necessary and
     * sufficient:
     *    * FOV scale can be reasonably approximated from lens-to-screen distance
     *      and display size (i.e. knowing lens focal length isn't crucial).
     *    * Lenses are assumed to be horizontally centered with respect to
     *      display.
     *    * The display is not necessarily vertically centered.  For interchangeable
     *      phones where the device rests against a tray, we can derive
     *      the vertical offset from tray-to-lens height along with phone-specific
     *      bezel and screen sizes (supplied separately).
     * </pre>
     *
     * Protobuf type {@code cardboard.DeviceParams}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.cardboard.proto.CardboardDevice.DeviceParams, Builder> implements
        // @@protoc_insertion_point(builder_implements:cardboard.DeviceParams)
        com.google.cardboard.proto.CardboardDevice.DeviceParamsOrBuilder {
      // Construct using com.google.cardboard.proto.CardboardDevice.DeviceParams.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * String identifying the device's vendor (e.g. "Google, Inc.").
       * A device's [vendor, model] pair is expected to be globally unique.
       * </pre>
       *
       * <code>optional string vendor = 1;</code>
       * @return Whether the vendor field is set.
       */
      @java.lang.Override
      public boolean hasVendor() {
        return instance.hasVendor();
      }
      /**
       * <pre>
       * String identifying the device's vendor (e.g. "Google, Inc.").
       * A device's [vendor, model] pair is expected to be globally unique.
       * </pre>
       *
       * <code>optional string vendor = 1;</code>
       * @return The vendor.
       */
      @java.lang.Override
      public java.lang.String getVendor() {
        return instance.getVendor();
      }
      /**
       * <pre>
       * String identifying the device's vendor (e.g. "Google, Inc.").
       * A device's [vendor, model] pair is expected to be globally unique.
       * </pre>
       *
       * <code>optional string vendor = 1;</code>
       * @return The bytes for vendor.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getVendorBytes() {
        return instance.getVendorBytes();
      }
      /**
       * <pre>
       * String identifying the device's vendor (e.g. "Google, Inc.").
       * A device's [vendor, model] pair is expected to be globally unique.
       * </pre>
       *
       * <code>optional string vendor = 1;</code>
       * @param value The vendor to set.
       * @return This builder for chaining.
       */
      public Builder setVendor(
          java.lang.String value) {
        copyOnWrite();
        instance.setVendor(value);
        return this;
      }
      /**
       * <pre>
       * String identifying the device's vendor (e.g. "Google, Inc.").
       * A device's [vendor, model] pair is expected to be globally unique.
       * </pre>
       *
       * <code>optional string vendor = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearVendor() {
        copyOnWrite();
        instance.clearVendor();
        return this;
      }
      /**
       * <pre>
       * String identifying the device's vendor (e.g. "Google, Inc.").
       * A device's [vendor, model] pair is expected to be globally unique.
       * </pre>
       *
       * <code>optional string vendor = 1;</code>
       * @param value The bytes for vendor to set.
       * @return This builder for chaining.
       */
      public Builder setVendorBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setVendorBytes(value);
        return this;
      }

      /**
       * <pre>
       * String identifying the device's model, including revision info if
       * needed (e.g. "Cardboard v1").  A device's [vendor, model] pair is
       * expected to be globally unique.
       * </pre>
       *
       * <code>optional string model = 2;</code>
       * @return Whether the model field is set.
       */
      @java.lang.Override
      public boolean hasModel() {
        return instance.hasModel();
      }
      /**
       * <pre>
       * String identifying the device's model, including revision info if
       * needed (e.g. "Cardboard v1").  A device's [vendor, model] pair is
       * expected to be globally unique.
       * </pre>
       *
       * <code>optional string model = 2;</code>
       * @return The model.
       */
      @java.lang.Override
      public java.lang.String getModel() {
        return instance.getModel();
      }
      /**
       * <pre>
       * String identifying the device's model, including revision info if
       * needed (e.g. "Cardboard v1").  A device's [vendor, model] pair is
       * expected to be globally unique.
       * </pre>
       *
       * <code>optional string model = 2;</code>
       * @return The bytes for model.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getModelBytes() {
        return instance.getModelBytes();
      }
      /**
       * <pre>
       * String identifying the device's model, including revision info if
       * needed (e.g. "Cardboard v1").  A device's [vendor, model] pair is
       * expected to be globally unique.
       * </pre>
       *
       * <code>optional string model = 2;</code>
       * @param value The model to set.
       * @return This builder for chaining.
       */
      public Builder setModel(
          java.lang.String value) {
        copyOnWrite();
        instance.setModel(value);
        return this;
      }
      /**
       * <pre>
       * String identifying the device's model, including revision info if
       * needed (e.g. "Cardboard v1").  A device's [vendor, model] pair is
       * expected to be globally unique.
       * </pre>
       *
       * <code>optional string model = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearModel() {
        copyOnWrite();
        instance.clearModel();
        return this;
      }
      /**
       * <pre>
       * String identifying the device's model, including revision info if
       * needed (e.g. "Cardboard v1").  A device's [vendor, model] pair is
       * expected to be globally unique.
       * </pre>
       *
       * <code>optional string model = 2;</code>
       * @param value The bytes for model to set.
       * @return This builder for chaining.
       */
      public Builder setModelBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setModelBytes(value);
        return this;
      }

      /**
       * <pre>
       * Distance from the display screen to the optical center of lenses.
       * This is a required field for distortion rendering, and must be positive.
       * </pre>
       *
       * <code>optional float screen_to_lens_distance = 3;</code>
       * @return Whether the screenToLensDistance field is set.
       */
      @java.lang.Override
      public boolean hasScreenToLensDistance() {
        return instance.hasScreenToLensDistance();
      }
      /**
       * <pre>
       * Distance from the display screen to the optical center of lenses.
       * This is a required field for distortion rendering, and must be positive.
       * </pre>
       *
       * <code>optional float screen_to_lens_distance = 3;</code>
       * @return The screenToLensDistance.
       */
      @java.lang.Override
      public float getScreenToLensDistance() {
        return instance.getScreenToLensDistance();
      }
      /**
       * <pre>
       * Distance from the display screen to the optical center of lenses.
       * This is a required field for distortion rendering, and must be positive.
       * </pre>
       *
       * <code>optional float screen_to_lens_distance = 3;</code>
       * @param value The screenToLensDistance to set.
       * @return This builder for chaining.
       */
      public Builder setScreenToLensDistance(float value) {
        copyOnWrite();
        instance.setScreenToLensDistance(value);
        return this;
      }
      /**
       * <pre>
       * Distance from the display screen to the optical center of lenses.
       * This is a required field for distortion rendering, and must be positive.
       * </pre>
       *
       * <code>optional float screen_to_lens_distance = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearScreenToLensDistance() {
        copyOnWrite();
        instance.clearScreenToLensDistance();
        return this;
      }

      /**
       * <pre>
       * Horizontal distance between optical center of the lenses.
       * This is a required field for distortion rendering, and must be positive.
       * </pre>
       *
       * <code>optional float inter_lens_distance = 4;</code>
       * @return Whether the interLensDistance field is set.
       */
      @java.lang.Override
      public boolean hasInterLensDistance() {
        return instance.hasInterLensDistance();
      }
      /**
       * <pre>
       * Horizontal distance between optical center of the lenses.
       * This is a required field for distortion rendering, and must be positive.
       * </pre>
       *
       * <code>optional float inter_lens_distance = 4;</code>
       * @return The interLensDistance.
       */
      @java.lang.Override
      public float getInterLensDistance() {
        return instance.getInterLensDistance();
      }
      /**
       * <pre>
       * Horizontal distance between optical center of the lenses.
       * This is a required field for distortion rendering, and must be positive.
       * </pre>
       *
       * <code>optional float inter_lens_distance = 4;</code>
       * @param value The interLensDistance to set.
       * @return This builder for chaining.
       */
      public Builder setInterLensDistance(float value) {
        copyOnWrite();
        instance.setInterLensDistance(value);
        return this;
      }
      /**
       * <pre>
       * Horizontal distance between optical center of the lenses.
       * This is a required field for distortion rendering, and must be positive.
       * </pre>
       *
       * <code>optional float inter_lens_distance = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearInterLensDistance() {
        copyOnWrite();
        instance.clearInterLensDistance();
        return this;
      }

      /**
       * <pre>
       * Four-element tuple (left, right, bottom, top) of left eye's view extent
       * angles relative to center, assuming the following:
       *     * eye is aligned with optical center of lens
       *     * display screen is equal or larger than extents viewable through lens
       *     * nominal eye-to-lens distance
       *     * mirrored field of view will be applied to the right eye
       * These values are essentially used as an optimization to avoid rendering
       * pixels which can't be seen.
       * This is a required field for distortion rendering, and angles must be
       * positive.
       * </pre>
       *
       * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
       * @return A list containing the leftEyeFieldOfViewAngles.
       */
      @java.lang.Override
      public java.util.List<java.lang.Float>
          getLeftEyeFieldOfViewAnglesList() {
        return java.util.Collections.unmodifiableList(
            instance.getLeftEyeFieldOfViewAnglesList());
      }
      /**
       * <pre>
       * Four-element tuple (left, right, bottom, top) of left eye's view extent
       * angles relative to center, assuming the following:
       *     * eye is aligned with optical center of lens
       *     * display screen is equal or larger than extents viewable through lens
       *     * nominal eye-to-lens distance
       *     * mirrored field of view will be applied to the right eye
       * These values are essentially used as an optimization to avoid rendering
       * pixels which can't be seen.
       * This is a required field for distortion rendering, and angles must be
       * positive.
       * </pre>
       *
       * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
       * @return The count of leftEyeFieldOfViewAngles.
       */
      @java.lang.Override
      public int getLeftEyeFieldOfViewAnglesCount() {
        return instance.getLeftEyeFieldOfViewAnglesCount();
      }
      /**
       * <pre>
       * Four-element tuple (left, right, bottom, top) of left eye's view extent
       * angles relative to center, assuming the following:
       *     * eye is aligned with optical center of lens
       *     * display screen is equal or larger than extents viewable through lens
       *     * nominal eye-to-lens distance
       *     * mirrored field of view will be applied to the right eye
       * These values are essentially used as an optimization to avoid rendering
       * pixels which can't be seen.
       * This is a required field for distortion rendering, and angles must be
       * positive.
       * </pre>
       *
       * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The leftEyeFieldOfViewAngles at the given index.
       */
      @java.lang.Override
      public float getLeftEyeFieldOfViewAngles(int index) {
        return instance.getLeftEyeFieldOfViewAngles(index);
      }
      /**
       * <pre>
       * Four-element tuple (left, right, bottom, top) of left eye's view extent
       * angles relative to center, assuming the following:
       *     * eye is aligned with optical center of lens
       *     * display screen is equal or larger than extents viewable through lens
       *     * nominal eye-to-lens distance
       *     * mirrored field of view will be applied to the right eye
       * These values are essentially used as an optimization to avoid rendering
       * pixels which can't be seen.
       * This is a required field for distortion rendering, and angles must be
       * positive.
       * </pre>
       *
       * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
       * @param value The leftEyeFieldOfViewAngles to set.
       * @return This builder for chaining.
       */
      public Builder setLeftEyeFieldOfViewAngles(
          int index, float value) {
        copyOnWrite();
        instance.setLeftEyeFieldOfViewAngles(index, value);
        return this;
      }
      /**
       * <pre>
       * Four-element tuple (left, right, bottom, top) of left eye's view extent
       * angles relative to center, assuming the following:
       *     * eye is aligned with optical center of lens
       *     * display screen is equal or larger than extents viewable through lens
       *     * nominal eye-to-lens distance
       *     * mirrored field of view will be applied to the right eye
       * These values are essentially used as an optimization to avoid rendering
       * pixels which can't be seen.
       * This is a required field for distortion rendering, and angles must be
       * positive.
       * </pre>
       *
       * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
       * @param value The leftEyeFieldOfViewAngles to add.
       * @return This builder for chaining.
       */
      public Builder addLeftEyeFieldOfViewAngles(float value) {
        copyOnWrite();
        instance.addLeftEyeFieldOfViewAngles(value);
        return this;
      }
      /**
       * <pre>
       * Four-element tuple (left, right, bottom, top) of left eye's view extent
       * angles relative to center, assuming the following:
       *     * eye is aligned with optical center of lens
       *     * display screen is equal or larger than extents viewable through lens
       *     * nominal eye-to-lens distance
       *     * mirrored field of view will be applied to the right eye
       * These values are essentially used as an optimization to avoid rendering
       * pixels which can't be seen.
       * This is a required field for distortion rendering, and angles must be
       * positive.
       * </pre>
       *
       * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
       * @param values The leftEyeFieldOfViewAngles to add.
       * @return This builder for chaining.
       */
      public Builder addAllLeftEyeFieldOfViewAngles(
          java.lang.Iterable<? extends java.lang.Float> values) {
        copyOnWrite();
        instance.addAllLeftEyeFieldOfViewAngles(values);
        return this;
      }
      /**
       * <pre>
       * Four-element tuple (left, right, bottom, top) of left eye's view extent
       * angles relative to center, assuming the following:
       *     * eye is aligned with optical center of lens
       *     * display screen is equal or larger than extents viewable through lens
       *     * nominal eye-to-lens distance
       *     * mirrored field of view will be applied to the right eye
       * These values are essentially used as an optimization to avoid rendering
       * pixels which can't be seen.
       * This is a required field for distortion rendering, and angles must be
       * positive.
       * </pre>
       *
       * <code>repeated float left_eye_field_of_view_angles = 5 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearLeftEyeFieldOfViewAngles() {
        copyOnWrite();
        instance.clearLeftEyeFieldOfViewAngles();
        return this;
      }

      /**
       * <pre>
       * Set according to vertical alignment strategy-- see enum comments above.
       * NOTE: If you set this to CENTER, see special instructions for the
       * tray_to_lens_distance field below.
       * </pre>
       *
       * <code>optional .cardboard.DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];</code>
       * @return Whether the verticalAlignment field is set.
       */
      @java.lang.Override
      public boolean hasVerticalAlignment() {
        return instance.hasVerticalAlignment();
      }
      /**
       * <pre>
       * Set according to vertical alignment strategy-- see enum comments above.
       * NOTE: If you set this to CENTER, see special instructions for the
       * tray_to_lens_distance field below.
       * </pre>
       *
       * <code>optional .cardboard.DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];</code>
       * @return The verticalAlignment.
       */
      @java.lang.Override
      public com.google.cardboard.proto.CardboardDevice.DeviceParams.VerticalAlignmentType getVerticalAlignment() {
        return instance.getVerticalAlignment();
      }
      /**
       * <pre>
       * Set according to vertical alignment strategy-- see enum comments above.
       * NOTE: If you set this to CENTER, see special instructions for the
       * tray_to_lens_distance field below.
       * </pre>
       *
       * <code>optional .cardboard.DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];</code>
       * @param value The enum numeric value on the wire for verticalAlignment to set.
       * @return This builder for chaining.
       */
      public Builder setVerticalAlignment(com.google.cardboard.proto.CardboardDevice.DeviceParams.VerticalAlignmentType value) {
        copyOnWrite();
        instance.setVerticalAlignment(value);
        return this;
      }
      /**
       * <pre>
       * Set according to vertical alignment strategy-- see enum comments above.
       * NOTE: If you set this to CENTER, see special instructions for the
       * tray_to_lens_distance field below.
       * </pre>
       *
       * <code>optional .cardboard.DeviceParams.VerticalAlignmentType vertical_alignment = 11 [default = BOTTOM];</code>
       * @return This builder for chaining.
       */
      public Builder clearVerticalAlignment() {
        copyOnWrite();
        instance.clearVerticalAlignment();
        return this;
      }

      /**
       * <pre>
       * If the phone is aligned vertically within the device by resting against
       * a fixed top or bottom tray, this is the distance from the tray to
       * optical center of the lenses.
       * This is a required field for distortion rendering, and must be positive.
       * NOTE: Due to a bug in initial versions of the SDK's, this field
       * must be set explicitly to .035 when vertical_alignment = CENTER.
       * </pre>
       *
       * <code>optional float tray_to_lens_distance = 6;</code>
       * @return Whether the trayToLensDistance field is set.
       */
      @java.lang.Override
      public boolean hasTrayToLensDistance() {
        return instance.hasTrayToLensDistance();
      }
      /**
       * <pre>
       * If the phone is aligned vertically within the device by resting against
       * a fixed top or bottom tray, this is the distance from the tray to
       * optical center of the lenses.
       * This is a required field for distortion rendering, and must be positive.
       * NOTE: Due to a bug in initial versions of the SDK's, this field
       * must be set explicitly to .035 when vertical_alignment = CENTER.
       * </pre>
       *
       * <code>optional float tray_to_lens_distance = 6;</code>
       * @return The trayToLensDistance.
       */
      @java.lang.Override
      public float getTrayToLensDistance() {
        return instance.getTrayToLensDistance();
      }
      /**
       * <pre>
       * If the phone is aligned vertically within the device by resting against
       * a fixed top or bottom tray, this is the distance from the tray to
       * optical center of the lenses.
       * This is a required field for distortion rendering, and must be positive.
       * NOTE: Due to a bug in initial versions of the SDK's, this field
       * must be set explicitly to .035 when vertical_alignment = CENTER.
       * </pre>
       *
       * <code>optional float tray_to_lens_distance = 6;</code>
       * @param value The trayToLensDistance to set.
       * @return This builder for chaining.
       */
      public Builder setTrayToLensDistance(float value) {
        copyOnWrite();
        instance.setTrayToLensDistance(value);
        return this;
      }
      /**
       * <pre>
       * If the phone is aligned vertically within the device by resting against
       * a fixed top or bottom tray, this is the distance from the tray to
       * optical center of the lenses.
       * This is a required field for distortion rendering, and must be positive.
       * NOTE: Due to a bug in initial versions of the SDK's, this field
       * must be set explicitly to .035 when vertical_alignment = CENTER.
       * </pre>
       *
       * <code>optional float tray_to_lens_distance = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearTrayToLensDistance() {
        copyOnWrite();
        instance.clearTrayToLensDistance();
        return this;
      }

      /**
       * <pre>
       * Coefficients Ki for pincushion distortion function which maps
       * from position on real screen to virtual screen (i.e. texture) relative
       * to optical center:
       *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
       * where r is the distance in tan-angle units from the optical center,
       * p the input point, and p' the output point.  Tan-angle units can be
       * computed as distance on the screen divided by distance from the
       * virtual eye to the screen.
       * </pre>
       *
       * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
       * @return A list containing the distortionCoefficients.
       */
      @java.lang.Override
      public java.util.List<java.lang.Float>
          getDistortionCoefficientsList() {
        return java.util.Collections.unmodifiableList(
            instance.getDistortionCoefficientsList());
      }
      /**
       * <pre>
       * Coefficients Ki for pincushion distortion function which maps
       * from position on real screen to virtual screen (i.e. texture) relative
       * to optical center:
       *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
       * where r is the distance in tan-angle units from the optical center,
       * p the input point, and p' the output point.  Tan-angle units can be
       * computed as distance on the screen divided by distance from the
       * virtual eye to the screen.
       * </pre>
       *
       * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
       * @return The count of distortionCoefficients.
       */
      @java.lang.Override
      public int getDistortionCoefficientsCount() {
        return instance.getDistortionCoefficientsCount();
      }
      /**
       * <pre>
       * Coefficients Ki for pincushion distortion function which maps
       * from position on real screen to virtual screen (i.e. texture) relative
       * to optical center:
       *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
       * where r is the distance in tan-angle units from the optical center,
       * p the input point, and p' the output point.  Tan-angle units can be
       * computed as distance on the screen divided by distance from the
       * virtual eye to the screen.
       * </pre>
       *
       * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
       * @param index The index of the element to return.
       * @return The distortionCoefficients at the given index.
       */
      @java.lang.Override
      public float getDistortionCoefficients(int index) {
        return instance.getDistortionCoefficients(index);
      }
      /**
       * <pre>
       * Coefficients Ki for pincushion distortion function which maps
       * from position on real screen to virtual screen (i.e. texture) relative
       * to optical center:
       *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
       * where r is the distance in tan-angle units from the optical center,
       * p the input point, and p' the output point.  Tan-angle units can be
       * computed as distance on the screen divided by distance from the
       * virtual eye to the screen.
       * </pre>
       *
       * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
       * @param value The distortionCoefficients to set.
       * @return This builder for chaining.
       */
      public Builder setDistortionCoefficients(
          int index, float value) {
        copyOnWrite();
        instance.setDistortionCoefficients(index, value);
        return this;
      }
      /**
       * <pre>
       * Coefficients Ki for pincushion distortion function which maps
       * from position on real screen to virtual screen (i.e. texture) relative
       * to optical center:
       *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
       * where r is the distance in tan-angle units from the optical center,
       * p the input point, and p' the output point.  Tan-angle units can be
       * computed as distance on the screen divided by distance from the
       * virtual eye to the screen.
       * </pre>
       *
       * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
       * @param value The distortionCoefficients to add.
       * @return This builder for chaining.
       */
      public Builder addDistortionCoefficients(float value) {
        copyOnWrite();
        instance.addDistortionCoefficients(value);
        return this;
      }
      /**
       * <pre>
       * Coefficients Ki for pincushion distortion function which maps
       * from position on real screen to virtual screen (i.e. texture) relative
       * to optical center:
       *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
       * where r is the distance in tan-angle units from the optical center,
       * p the input point, and p' the output point.  Tan-angle units can be
       * computed as distance on the screen divided by distance from the
       * virtual eye to the screen.
       * </pre>
       *
       * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
       * @param values The distortionCoefficients to add.
       * @return This builder for chaining.
       */
      public Builder addAllDistortionCoefficients(
          java.lang.Iterable<? extends java.lang.Float> values) {
        copyOnWrite();
        instance.addAllDistortionCoefficients(values);
        return this;
      }
      /**
       * <pre>
       * Coefficients Ki for pincushion distortion function which maps
       * from position on real screen to virtual screen (i.e. texture) relative
       * to optical center:
       *    p' = p (1 + K1 r^2 + K2 r^4 + ... + Kn r^(2n))
       * where r is the distance in tan-angle units from the optical center,
       * p the input point, and p' the output point.  Tan-angle units can be
       * computed as distance on the screen divided by distance from the
       * virtual eye to the screen.
       * </pre>
       *
       * <code>repeated float distortion_coefficients = 7 [packed = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearDistortionCoefficients() {
        copyOnWrite();
        instance.clearDistortionCoefficients();
        return this;
      }

      /**
       * <pre>
       * Specify primary input mechanism of the HMD.  Intended for advisory
       * purposes only, to address simple questions such as "can HMD
       * be used with apps requiring a physical button event?" or "what icon
       * should be used to represent button action to the user?".
       * </pre>
       *
       * <code>optional .cardboard.DeviceParams.ButtonType primary_button = 12 [default = MAGNET];</code>
       * @return Whether the primaryButton field is set.
       */
      @java.lang.Override
      public boolean hasPrimaryButton() {
        return instance.hasPrimaryButton();
      }
      /**
       * <pre>
       * Specify primary input mechanism of the HMD.  Intended for advisory
       * purposes only, to address simple questions such as "can HMD
       * be used with apps requiring a physical button event?" or "what icon
       * should be used to represent button action to the user?".
       * </pre>
       *
       * <code>optional .cardboard.DeviceParams.ButtonType primary_button = 12 [default = MAGNET];</code>
       * @return The primaryButton.
       */
      @java.lang.Override
      public com.google.cardboard.proto.CardboardDevice.DeviceParams.ButtonType getPrimaryButton() {
        return instance.getPrimaryButton();
      }
      /**
       * <pre>
       * Specify primary input mechanism of the HMD.  Intended for advisory
       * purposes only, to address simple questions such as "can HMD
       * be used with apps requiring a physical button event?" or "what icon
       * should be used to represent button action to the user?".
       * </pre>
       *
       * <code>optional .cardboard.DeviceParams.ButtonType primary_button = 12 [default = MAGNET];</code>
       * @param value The enum numeric value on the wire for primaryButton to set.
       * @return This builder for chaining.
       */
      public Builder setPrimaryButton(com.google.cardboard.proto.CardboardDevice.DeviceParams.ButtonType value) {
        copyOnWrite();
        instance.setPrimaryButton(value);
        return this;
      }
      /**
       * <pre>
       * Specify primary input mechanism of the HMD.  Intended for advisory
       * purposes only, to address simple questions such as "can HMD
       * be used with apps requiring a physical button event?" or "what icon
       * should be used to represent button action to the user?".
       * </pre>
       *
       * <code>optional .cardboard.DeviceParams.ButtonType primary_button = 12 [default = MAGNET];</code>
       * @return This builder for chaining.
       */
      public Builder clearPrimaryButton() {
        copyOnWrite();
        instance.clearPrimaryButton();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cardboard.DeviceParams)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.cardboard.proto.CardboardDevice.DeviceParams();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "vendor_",
              "model_",
              "screenToLensDistance_",
              "interLensDistance_",
              "leftEyeFieldOfViewAngles_",
              "trayToLensDistance_",
              "distortionCoefficients_",
              "verticalAlignment_",
              com.google.cardboard.proto.CardboardDevice.DeviceParams.VerticalAlignmentType.internalGetVerifier(),
              "primaryButton_",
              com.google.cardboard.proto.CardboardDevice.DeviceParams.ButtonType.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0001\t\u0000\u0001\u0001\f\t\u0000\u0002\u0000\u0001\u1008\u0000\u0002\u1008\u0001" +
                "\u0003\u1001\u0002\u0004\u1001\u0003\u0005$\u0006\u1001\u0005\u0007$\u000b\u100c" +
                "\u0004\f\u100c\u0006";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.cardboard.proto.CardboardDevice.DeviceParams> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.cardboard.proto.CardboardDevice.DeviceParams.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.cardboard.proto.CardboardDevice.DeviceParams>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cardboard.DeviceParams)
    private static final com.google.cardboard.proto.CardboardDevice.DeviceParams DEFAULT_INSTANCE;
    static {
      DeviceParams defaultInstance = new DeviceParams();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        DeviceParams.class, defaultInstance);
    }

    public static com.google.cardboard.proto.CardboardDevice.DeviceParams getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<DeviceParams> PARSER;

    public static com.google.protobuf.Parser<DeviceParams> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
